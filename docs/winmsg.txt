Обработка сообщений Windows

Обработка сообщений производится в inWinProc. 
inWinProc - векторное слово, которому подключается необходимая процедура обработки сообщений.

ASSEMBLER FORTH32 LINK   ASSEMBLER CONTEXT !

HEADER winproc HERE CELL+ ,
  push_rcx push_rdx push_r8 push_r9 push_rbx push_rsi push_rdi 
  mov_rax,# hwnd ,   mov_[rax],rcx   
  mov_rax,# wmsg ,   mov_[rax],rdx   
  mov_rax,# wparam , mov_[rax],r8	 
  mov_rax,# lparam , mov_[rax],r9	 
 
  mov_rax,# ' inWinProc  , 
  mov_r11,# ' Push @ ,    call_r11 
  mov_r11,# ' EXECUTE @ , call_r11 
  mov_r11,# ' Pop @ ,     call_r11 
  
  test_rax,rax
  jne	forward> 
  pop_rdi pop_rsi pop_rbx pop_r9 pop_r8 pop_rdx pop_rcx
  ret 
 
  >forward  
  pop_rdi pop_rsi pop_rbx pop_r9 pop_r8 pop_rdx pop_rcx 
  push_rcx     push_rdx push_r8 push_r9 push_rbx push_rsi push_rdi 
	 
  mov_r11,# ' DefWindowProcA CELL+ @ ,
  sub_rsp,b# 0x 20 B,
  call_r11 
  add_rsp,b# 0x 20 B, 
  pop_rdi pop_rsi pop_rbx pop_r9 pop_r8 pop_rdx pop_rcx
  ret
 ALIGN

FORTH32 CONTEXT !

1 вариант
Имена сообщений определяются как константы. В inWinProc используется Case.
WORD: userinWinProc    
			
     Case 
				
    wmsg @  WM_LBUTTONDOWN =  Of   do_something    0 EndOf 
	
    wmsg @  WM_LBUTTONUP   =  Of   do_something_1  0 EndOf
	
    wmsg @  WM_MOUSEMOVE   =  Of   do_something_2  0 EndOf

    wmsg @  WM_PAINT       =  Of   do_something_3  0 Endof

   1 EndCase 	
    
 ;WORD 
 
 2 вариант
 Спрятать конструкцию Case ... EndCase и одинаковые слова.
 
 Писать
 WM_LBUTTONDOWN{ do_something   }WM_LBUTTONDOW
 WM_LBUTTONUP{   do_something_1 }WM_LBUTTONUP
 что и короче и нагляднее.
 
 Для этого надо "разорвать" Of ... EndOf по разным определениям. В силу того, что эти квазиметки-теги используются
 внутри определения, это сделать просто. Оба слова-тега должны быть немедленного исполнения и компилировать 
 конструкцию управления.

 WORD: (wm_lbuttondown) wmsg @  WM_LBUTTONDOWN = ;WORD 
 
 IMMEDIATES CURRENT ! 
 
 WORD:   WM_LBUTTONDOWN{       COMPILE (wm_lbuttondown) COMPILE ?OF HERE    COMPILE 0 ;WORD 

 WORD:   }WM_LBUTTONDOWN       THEN  COMPILE 0 ;WORD 
 
 FORTH32 CURRENT ! 

То-есть аналогично словам Of Then слова WM_LBUTTONDOWN{  }WM_LBUTTONDOWN скомпилируют конструкцию управления и необходимые
к ней добавки. Сразу видны недостатки такого написания. Придется писать по паре определений для каждого сообщения Windows.
Закрывающий тэг, как видно, одинаков для всех сообщений. Назовем его универсально }} двойную скобку сложнее забыть и потерять
в тексте.

Так как все слова-теги практически идентичны и отличаются лишь именами и связанными с ними константами, логично не заниматься
копипастом, а написать определяющее слово.

Вариант 3

 0d 512 WM: WM_MOUSEMOVE{
 0d 513 WM: WM_LBUTTONDOWN( 
 ...
 
 Начнем с конца
 
 IMMEDIATES CURRENT !
 WORD: }}    THEN  COMPILE 0 ;WORD 
 FORTH32 CURRENT ! 
 
 
 А вот как написать определяющее слово для слов немедленного исполнения?
 Собственно, определяющее слово нужно использовать после IMMEDIATES CURRENT !
 
 IMMEDIATES CURRENT !
 
 WORD: }}    THEN  COMPILE 0 ;WORD 
 
 0d 512 WM: WM_MOUSEMOVE{
 0d 513 WM: WM_LBUTTONDOWN(
 
 FORTH32 CURRENT ! 
 
 -------------------------
 WORD: WM:   CREATE , DOES> @  wmsg = ?OF .... ;WORD 
 А нет. Не так все просто. Текст после DOES> должен не просто исполняться, а компилировать целую конструкцию 
 ------------------------
 WORD: ?wm  wmsg @ = ;WORD 
 WORD: WM:   CREATE , DOES> @   LIT, COMPILE ?wm COMPILE ?OF HERE    COMPILE 0  ;WORD 
 Подсказка: ?OF нельзя прятать внутрь ?wm 
 Итак, работает. Открывающую скобку оказалось полезным тоже сделать двойной. Так заметнее, круглая она или фигурная.
 Но осталось чувство неудовлетворенности. Нет нужды проверять все остальные сообщения, то-есть необходимо вернуться
 к Case ... EndCase. 
 
  
WORD: gbd   
			WM_LBUTTONDOWN{{ on_lbttndown   }}
			WM_PAINT{{       drawlines      }} 
			WM_LBUTTONUP{{   1 dragon !     }}
			WM_MOUSEMOVE{{   nsdot  @   <> If  ."  dot "  drawpoint   Then  
 
                             dragon @ If  nsdot !  clearwin drawlines Then  }}
			
			1 
 ;WORD 
 
 В принципе, тогда следует пойти и дальше. Достаточно сделать заглушку, которая будет наполняться обработчиками сообщений.
 
 MESSAGES{{
                        WM_LBUTTONDOWN{{ on_lbttndown   }}
			WM_PAINT{{       drawlines      }} 
			WM_LBUTTONUP{{   1 dragon !     }}
			WM_MOUSEMOVE{{   nsdot  @   <> If  ."  dot "  drawpoint   Then  
 
                             dragon @ If  nsdot !  clearwin drawlines Then  }}
 
 }}MESSAGES
 
 
 Закрывающее слово возвращать единицу (не нуль) и закрывать Case.
 
 WORD:  }}MESSAGES   COMPILE 1    [ CONTEXT @  IMMEDIATES CONTEXT ! ' EndCase   ] , [ CONTEXT ! ]    ;WORD
 
 Это не работает. 
 Работает это: 
 Word: }}MESSAGES      ', COMPILE ', 1 ', (EndCase)  ', COMPILE   ', EXIT  ', quit  ;Word
 
 Приходится откатываться назад, есть какой-то неуловимый нюанс. И нюанс этот в том, что слово EXIT присутствует в списке
 IMMEDIATES и исполняется. Вместо него следует использовать слово ;Word. 
 
 
 Закрывающая }} должна работать аналогично EndOf
 
 WORD: }}     COMPILE [ CONTEXT @  IMMEDIATES CONTEXT ! ' EndOf   ] , [ CONTEXT ! ] COMPILE 0 ;WORD 
 Вернее
 WORD: }}    COMPILE 0  COMPILE BRANCH HERE >R COMPILE 0 THEN R> ;WORD
 
 
 А вот открывающее слово посложней. Кроме запуска компиляции оно должно компилировать начало Case.
 MESSAGES{{  
 1) Отмечать HERE и присваивать его inWinProc.
 2) компилировать  interpret# 
 3) запускать immediator  
 
 То-есть HERE ' inWinProc CELL+ !  NONAME: 
 Но, прежде чем запускать интерпретатор надо выполнить Case.  
  HERE ' inWinProc CELL+ ! interpret#  ,  0  immediator 
 
 
 WORD: MESSAGES{{   HERE ' inWinProc CELL+ ! interpret#  ,  0  immediator  ;WORD 
 

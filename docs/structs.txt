Проект структур

strucname  elem1 @  elem2 @  + elem3  !  
strucnname 2  elem5 @  elem3 ! 

Имя структуры является списком, в котором хранятся элементы структуры.
Вопрос, если элементы разного размера?
Значит каждый элемент структуры должен иметь средства доступа к нему.
Средства доступа простые - получить элемент, записать элемент.
get store

Strucname -elem1 get   -elem2 store 

Каждый элемент помимо собственно данных содержит ссылку на код для выковыривания и заковыривания данных.
На первых порах можно сделать жирные структуры, один элемент - одна ячейка, даже если это бит. О группировке подумаем после.

WORD: get_qword   @  ;WORD
WORD: set_qword   !  ;WORD

WORD: get_dword   D@ ;WORD
WORD: set_dword   D! ;WORD 
и т. скучно далее.

В свете необходимого хочется чтобы структура сама полностью отдавалась.

Для начала посмотрим на CreateWindowExA

На стек должно быть положено

STRUC: winparam  
           DWORD     dwExStyle
           QWORD     lpClassName
           QWORD     lpWindowName
           DWORD     dwStyle 
           int       x
           int       y
           int       nWidth
           int       nHeight
           QWORD     hWndParent
           QWORD     hMenu
           QWORD     hInstance
           QWORD     lpParam
;STRUC 


WORD: StartWindow    winparam CreateWindow hwnd !   MessageLoop ;WORD 

Предположение
sctrucname кладет на стек содержимое структуры
in strucname делает доступными элементы структуры
in strucname -elem1 get -elem2 set
нужен ли strucsize?
Нужен. Структуру придется выкладывать на стек поэлементно. strucsize в элементах или в байтах?
Если структуры выкладывать на стек поэлементно, то можно просто исполнять get пока не доберемся до конца.
Элементы в структуре - список. Попробуем пока сделать слово STRUC:

 STRUC:  WNDCLASS 
   DWORD      cbSize
   DWORD      style
   QWORD      WndProc
   DWORD      cbClsExtra
   DWORD      cbWndExtra
   QWORD      hInstance
   QWORD      hIcon
   QWORD      hCursor
   QWORD      Background
   QWORD      MenuName
   QWORD      ClassName
   QWORD      hIconSm
;STRUC


WORD: STRUC:  CREATE ;WORD 

WORD: QWORD    CREATE  0 , ;WORD 

Так. Важная часть.
Каждый элемент структуры содержит три ячейки после заголовка. Стандартное поле кода кладет адрес этого элемента. 
НЕТ
Элемент содержит два поля кодя - одно для чтения элемента, другое - для записи. Сответственно слово, указывающее 
размер элемента записывает эти два поля кода. Пока пусть всегда резервируется ячейка.

WORD: QWORD HEADER  ['] (qword_rd) @ ,  ['] (qword_wr) @ ,   0 , ;WORD

Соответственно:

WORD: (qword_rd)   ...  

Значит так.
WORD: QWORD  VARIABLE 0 ,  ['] (qword_rd) @ ,  ['] (qword_wr) @ ,  ;WORD 

И 
WORD: (qword_rd)  @ ;WORD
WORD: (qword_wr)  ! ;WORD

Собственно, тогда можно сократить.

WORD: get   (( elem_addr -- elem_value )   DUP CELL+ @ EXECUTE ;WORD 
WORD: store (( new_value elem_addr --  )   DUP CELL+ CELL+ @ EXECUTE ;WORD 

Тээкс...
WORD: QWORD  VARIABLE    ['] @   ,  ['] !  ,  ;WORD 


WORD: get   (( elem_addr -- elem_value )   DUP CELL+  @ EXECUTE ;WORD 
WORD: store (( new_value elem_addr --  )   DUP CELL+ CELL+  @ EXECUTE ;WORD 


QWORD abc   
Работает. В свете отработанного пришла в голову мысль.

structname get положит содержимое структуры на стек.

Интересно... Как тогда должно работать
strucname -elem1 get  -elem2 get 

Была-то мысль, что strucname задает контекст, в котором лежат -elem1 -elem2 
А и бох сним. Пусть так и работает. 
Мысль другая. strucname должна создавать некий усеченный словарь. Без BADWORD и EXIT.

Игого: 
WORD: QWORD  VARIABLE    ['] @   ,  ['] !  ,  ;WORD 

WORD: get   (( elem_addr -- elem_value )   DUP CELL+  @ EXECUTE ;WORD 
WORD: store (( new_value elem_addr --  )   DUP CELL+ CELL+  @ EXECUTE ;WORD 

WORD: next_elem     N>LINK @ DUP h. ;WORD 
WORD: elem_name     DUP TYPE ;WORD 

WORD: get_st  ." get_struct " @ 1 hex, 4 Do  elem_name DUP NAME> CELL+ get h. next_elem Loop elem_name  ;WORD 

VARIABLE tmp 
WORD: get_struct  ." get_str " tmp !  @ Begin  elem_name DUP NAME> CELL+ get h. next_elem tmp @ <> UNTIL ;WORD 

WORD:  STRUC:  CURRENT @  VARIABLE ['] get_struct ,  ['] NOOP ,  LATEST N>LINK CELL+ CELL+    DOES>  DUP DUP  FORTH32 SWAP LINK   CONTEXT !  ;WORD 

WORD:  ;STRUC  DUP h. LATEST SWAP!   CURRENT !   ;WORD 

STRUC: strucname 

QWORD abc  
QWORD bde
QWORD tyu 

QWORD edf
;STRUC 


Работает. С get store гениально ваще.
Не нравится get_struct. Надо избавиться от переменной tmp и не наворотить каши на стеке.
get_struct принимает адрес структуры на стеке, проходит по элементам структуры и останавливается, когда доходит обратно до адреса структуры. Казалось бы, фигня, но ведь предполагается, что на выходе будет стопка элементов структуры. 
Убрать на стке возвратов?


WORD: get_struct  ." get_str " >R @ Begin  elem_name DUP NAME> CELL+ get h. next_elem DUP R@ < NOT Until RDROP ;WORD 



А теперь разберемся как это работает

WORD: QWORD  VARIABLE    ['] @   ,  ['] !  ,  ;WORD 

WORD: get   (( elem_addr -- elem_value )   DUP CELL+  @ EXECUTE ;WORD 
WORD: store (( new_value elem_addr --  )   DUP CELL+ CELL+  @ EXECUTE ;WORD 

WORD: next_elem     N>LINK @ ;WORD Принимает на стеке адрес поля имени, переходит к полю связи, разыменовывает его - то-есть переходит к следующему полю имени в списке.

WORD: elem_name     DUP TYPE ;WORD Печатает поле имени
 

WORD: get_struct  ." get_str " CRLF 
               >R убираем адрес поля параметров strucname
               @ что разыменовываем? strucname должно класть на стек адрес своего поля параметров. Два раза кладет? Таки нет. Один. Дебилушко... ясно откуда. 
               
               Begin  elem_name DUP NAME> CELL+ get h. CRLF  next_elem DUP R@ < NOT Until RDROP ;WORD 

WORD:  STRUC:  CURRENT @  VARIABLE ['] get_struct ,  ['] NOOP ,  LATEST N>LINK CELL+ CELL+    DOES>  DUP DUP  FORTH32 SWAP LINK   CONTEXT !  ;WORD 

WORD:  ;STRUC  DUP h. LATEST SWAP!   CURRENT !   ;WORD 

STRUC: strucname 

QWORD abc  
QWORD bde
QWORD tyu 

QWORD edf
;STRUC 


Собственно, все работает. Пробуем прикрутить к graph. 

Само-то работает,  вот после него не работает. CURRENT почему-то указывает на последнее имя в структуре, а не на имя структуры.

WORD:  STRUC:  
          CURRENT @  
          VARIABLE 
          ['] get_struct ,  ['] NOOP ,  
          (( LATEST N>LINK CELL+ CELL+  (( здесь мы переходим от имени структуры, к полю связи, потом кода, потом параметров..
                                         а почему не BODY> ? Потому что оно не реализовано. И вообще, нужно NAME> )
	   LATEST NAME> CELL+ (( то-есть после STRUC: на стеке остается CURRENT @, а кстати, что это? и адрес поля парамеров слова-структуры, в которое будет компилироваться структура )
	   
	   DOES>  DUP DUP  FORTH32 SWAP LINK   CONTEXT !  ;WORD 

WORD:  ;STRUC   
           LATEST SWAP! (( записываем имя последнего элемента в структуре в поле параметров имени структуры ) 
	   CURRENT !   (( по-идее должны восстановить список CURRENT ) 
;WORD 

Ну так и все верно. LATEST и показывает на последний элемент в структуре. А нам нужно чтобы он указывал на имя структуры.
HERE кладем, а потом CURRENT @ ! его прячем

такс.. проблема в том, что список FORTH32 циклится. 

ВВел BADWORD
WORD:  STRUC:  
          HERE
		  VARIABLE 
		  ['] get_struct ,  ['] NOOP ,  
		  LATEST NAME> CELL+ DUP (( поле параметров дважды )
		  HERE  SWAP! make_badword  (( здесь в поле параметров strucname сохраняется nfa BADWORD и еще ра он остается на стеке)
		  DOES>  DUP DUP  FORTH32  LINK   CONTEXT !  ;WORD 

WORD:  ;STRUC   
             LATEST SWAP! (( тэкс... здесь типо должен в pf strucnzme записаться nfa последнего элемента структуры. А на деле это не нужно вообще.  ) 
	     CURRENT @ !   ;WORD 
Но слово STRUC: должно ставить CURRENT на strucname. 

WORD:  STRUC:  
          HERE
		  VARIABLE 
		  ['] get_struct ,  ['] NOOP ,  
		  LATEST NAME> CELL+ DUP 
		  HERE  SWAP! make_badword  CURRENT ! 
		  DOES> ."  strucname_execute " DUP h.  (( DUP DUP  FORTH32  LINK   CONTEXT ! ) ;WORD 

WORD:  ;STRUC      CURRENT @ !   ;WORD 

Ай-яяяяй. Часть после DOES> не выполняется. Что логично, т.к. DOES> использует  LATEST , а оно уже укащывает на BADWORD.

Все переделать!
часть после DOES> выносится в отдельное определение и потом подсовывается к VARIABLE.

Разберем, какие функции должно нести слово strucname.
1) Быть как Variable
2) линковаться к контекстному списку
3) ставить контекст на себя

вот-вот. а слово STRUCT: должно
1) создавать strucname
2) компилировать к нему ссылки на get и store 
3) вставить BADWORD
4) сделать текущим список strucname


		 
WORD:  STRUC:  
          HERE
		  VARIABLE
		  ['] get_struct ,  ['] NOOP ,  
		  LATEST NAME> CELL+ DUP 
		  HERE  SWAP! make_badword  CURRENT ! 
		    ;WORD 

WORD:  ;STRUC      CURRENT @ !   ;WORD 

Какого-то рожна strucname указывает на общий список.

До ;STRUCT все работает корректно. Посмотрим.
		 
WORD:  STRUC:  
          HERE DUP h.
		  VARIABLE HERE CELL- DUP h. 
		  ['] get_struct ,  ['] NOOP ,  
		  LATEST NAME> CELL+  DUP h. 
		  HERE  SWAP! make_badword  
		    ;WORD 

WORD:  ;STRUC      CURRENT @ !   ;WORD 

Все долой. Попробуем начисто. 
		 
WORD:  STRUC:  
          CURRENT @ 
          VARIABLE HERE CELL-  DUP  
		  ['] get_struct ,  ['] NOOP ,  
		  HERE SWAP! make_badword  
		  DUP CURRENT ! DUP CONTEXT @ LINK   CONTEXT ! 
		  
		    ;WORD 

WORD:  ;STRUC      CURRENT  !   ;WORD 

Работает.
Осталось втиснуть CONTEXT ! в код для VARIABLE 

